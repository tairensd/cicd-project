version: 2.1
parameters:
  version-cache:
    type: string
    default: "v3"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "cicd-backend-${CIRCLE_WORKFLOW_ID}"; aws cloudformation delete-stack --stack-name "cicd-frontend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
  
  get_stack_ip:
    steps:
      - run:
          name: create inventory file for ip
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:aws:cloudformation:stack-name,Values=cicd-backend-${CIRCLE_WORKFLOW_ID}" --output text >> ./.circleci/ansible/inventory.txt

  get-backend-stack-url:
    steps:
      - run:
          name: getting backend url 
          command: |
            aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=cicd-backend-${CIRCLE_WORKFLOW_ID}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text >> ~/back-end-url
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build-<< pipeline.parameters.version-cache >>"]
      - run:
          name: Build front-end
          command: |
            cd ./frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-<< pipeline.parameters.version-cache >>

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Back-end build
          command: |
            cd ./backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-<< pipeline.parameters.version-cache >>
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Front-end unit testing
          command: |
            cd ./frontend && npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Back-end unit testing
          command: |
            cd ./backend && npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Front-end vulnerability scan
          command: |
            cd ./frontend && npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Back-end vulnerability scan
          command: |
            cd ./backend && npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cicdbackend \
               --stack-name "cicd-backend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - get-backend-stack-url
      - save_cache:
          paths:
            - "~/back-end-url"
          key: back-end-url-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cicdfrontend \
               --stack-name "cicd-frontend-${CIRCLE_WORKFLOW_ID}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - get_stack_ip
      - persist_to_workspace:
          root: ~/
          paths:
            - ./.circleci/ansible/inventory.txt
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:02:c3:37:a9:4b:ae:3b:6e:78:f5:81:96:46:d6:94"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Disable Host Key Checking
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./ansible/configure-server.yml
      - destroy-environment    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]