version: 2.1
parameters:
  version-cache:
    type: string
    default: "v4"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name "cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "cicd-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            success=`curl -H "token: tairen-${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}`
            if(( $success==1 )); 
            then
            cd ./backend
            npm install
            npm run migrations:revert
            fi
  
  get_stack_ip:
    steps:
      - run:
          name: create inventory file for ip
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:aws:cloudformation:stack-name,Values=cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ./.circleci/ansible/inventory
            cat ./.circleci/ansible/inventory

  get-backend-stack-url:
    steps:
      - run:
          name: getting backend url 
          command: |
            aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text >> ./back-end-url
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build-<< pipeline.parameters.version-cache >>"]
      - run:
          name: Build front-end
          command: |
            cd ./frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-<< pipeline.parameters.version-cache >>

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Back-end build
          command: |
            cd ./backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-<< pipeline.parameters.version-cache >>
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Front-end unit testing
          command: |
            cd ./frontend && npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Back-end unit testing
          command: |
            cd ./backend && npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Front-end vulnerability scan
          command: |
            cd ./frontend && npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: Back-end vulnerability scan
          command: |
            cd ./backend && npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=cicdbackend \
               --stack-name "cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=cicdfrontend \
              --stack-name "cicd-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: create inventory file for ip
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:aws:cloudformation:stack-name,Values=cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ./.circleci/ansible/inventory
            cat ./.circleci/ansible/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory
            - project/backend/
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["cb:02:c3:37:a9:4b:ae:3b:6e:78:f5:81:96:46:d6:94"]
      - run:
          name: install dependencies
          command: 
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cat ./.circleci/ansible/inventory
            ansible-playbook --version
            ansible-playbook -i ./.circleci/ansible/inventory ./.circleci/ansible/configure-server.yml
      - destroy-environment   

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-<< pipeline.parameters.version-cache >>]
      - run:
          name: update and install python
          command: |
            sudo apt-get update
            sudo apt-get install python3
      - run:
          name: install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            echo "unzip complete"
            sudo ./aws/install
            echo "aws install complete"
      - run:
          name: install less
          command: |
            sudo apt-get install less
            echo "less install complete"
      - run:
          name: run npm i and migration
          no_output_timeout: 15m
          command: |
            cd ./backend
            npm i
            npm run migrations 2>&1 | tee migrations.txt
            status=$(cat migrations.txt | grep -i "has been executed successfully")
      - run:
          name: check migration status and put into memstash 
          command: |
            if [ $status ]
            then
            curl -H "Content-Type: text/plain" -H "token: tairen-${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "0" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}
            else
            curl -H "Content-Type: text/plain" -H "token: tairen-${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - revert-migrations
      - destroy-environment
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: installing tar
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url and deploy frontend
          command: |
            aws ec2 describe-instances --filters "Name=tag:aws:cloudformation:stack-name,Values=cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicDnsName' --output text >> ./back-end-url
            BACKEND_IP=`cat ./back-end-url`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd ~/project/frontend
            npm i
            npm run build
            tar -C dist -czvf dist.tar.gz .
            aws s3 sync dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations
      - destroy-environment      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cb:02:c3:37:a9:4b:ae:3b:6e:78:f5:81:96:46:d6:94"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            export ANSIBLE_HOST_KEY_CHECKING=False
            tar -C backend -czvf backend.tar.gz .
            cp -p backend.tar.gz ./backend/backend.tar.gz
            ansible-playbook ./.circleci/ansible/deploy-backend.yml -i ./.circleci/ansible/inventory
      - revert-migrations
      - destroy-environment  
      
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-eu-west-2.amazonaws.com"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:aws:cloudformation:stack-name,Values=cicd-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            curl "http://${BACKEND_IP}:3030/api/status"
      - revert-migrations
      - destroy-environment
  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo "old workflow id: ${OldWorkflowID:0:7}"

            aws cloudformation update-stack \
            --use-previous-template \
            --stack-name uda-people-cloudfront \
            --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7},UsePreviousValue=false
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID:0:7}" ]]
            then
              aws s3 rb s3://udapeople-${OldWorkflowID:0:7} --force

              aws cloudformation delete-stack --stack-name "cicd-backend-${OldWorkflowID:0:7}"

              aws cloudformation delete-stack --stack-name "cicd-frontend-${OldWorkflowID:0:7}"

              echo "complete"
            fi
          no_output_timeout: 30m


#            aws cloudformation deploy \
#              --template-file .circleci/files/cloudfront.yml \
#              --stack-name cicd-cloudfront \
#              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#              --tags project=udapeople

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]